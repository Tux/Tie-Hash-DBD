.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "STDIN 1"
.TH STDIN 1 2023-10-12 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Tie::Array::DBD \- tie a plain array to a database table
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&  use DBI;
\&  use Tie::Array::DBD;
\&
\&  my $dbh = DBI\->connect ("dbi:Pg:", ...);
\&
\&  tie my @array, "Tie::Array::DBD", "dbi:SQLite:dbname=db.tie";
\&  tie my @array, "Tie::Array::DBD", $dbh;
\&  tie my @array, "Tie::Array::DBD", $dbh, {
\&      tbl => "t_tie_analysis",
\&      key => "h_key",
\&      fld => "h_value",
\&      str => "Storable",
\&      ro  => 0,
\&      };
\&
\&  $array[42] = $value;  # INSERT
\&  $array[42] = 3;       # UPDATE
\&  delete $array[42];    # DELETE
\&  $value = $array[42];  # SELECT
\&  @array = ();          # CLEAR
\&
\&  @array = (1..42);
\&  $array[\-2] = 42;
\&  $_ = pop @array;
\&  push @array, $_;
\&  $_ = shift @array;
\&  unshift @array, $_;
\&  @a = splice @array, 2, \-2, 5..9;
\&  @k = keys   @array;   # $] >= 5.011
\&  @v = values @array;   # $] >= 5.011
\&
\&  my $readonly = tied (@array)\->readonly ();
\&  tied (@array)\->readonly (1);
\&  $array[4] = 42; # FAIL
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module ties an array to a database table using \fBonly\fR an \f(CW\*(C`index\*(C'\fR
and a \f(CW\*(C`value\*(C'\fR field. If no tables specification is passed, this will
create a temporary table with \f(CW\*(C`h_key\*(C'\fR for the key field and a \f(CW\*(C`h_value\*(C'\fR
for the value field.
.PP
I think it would make sense  to merge the functionality that this module
provides into \f(CW\*(C`Tie::DBI\*(C'\fR.
.SH tie
.IX Header "tie"
The tie call accepts two arguments:
.SS Database
.IX Subsection "Database"
The first argument is the connection specifier.  This is either an open
database handle or a \f(CW\*(C`DBI_DSN\*(C'\fR string.
.PP
If this argument is a valid handle, this module does not open a database
all by itself, but uses the connection provided in the handle.
.PP
If the first argument is a scalar, it is used as DSN for DBI\->connect ().
.PP
Supported DBD drivers include DBD::Pg, DBD::SQLite, DBD::CSV, DBD::MariaDB,
DBD::mysql, DBD::Oracle, DBD::Unify, and DBD::Firebird.  Note that due to
limitations they won't all perform equally well. Firebird is not tested
anymore.
.PP
DBD::Pg and DBD::SQLite have an unexpected great performance when server
is the local system. DBD::SQLite is even almost as fast as DB_File.
.PP
The current implementation appears to be extremely slow for CSV, as
expected, mariadb/mysql, and Unify. For Unify and mariadb/mysql that is
because these do not allow indexing on the key field so they cannot be
set to be primary key.
.PP
When using DBD::CSV with Text::CSV_XS version 1.02 or newer, it might be
wise to disable utf8 encoding (only supported as of DBD::CSV\-0.48):
.PP
.Vb 1
\& "dbi:CSV:f_ext=.csv/r;csv_null=1;csv_decode_utf8=0"
.Ve
.SS Options
.IX Subsection "Options"
The second argument is optional and should \- if passed \- be a hashref to
options. The following options are recognized:
.IP tbl 2
.IX Item "tbl"
Defines the name of the table to be used. If none is passed, a new table
is created with a unique name like \f(CW\*(C`t_tie_dbda_42253_1\*(C'\fR. When possible,
the table is created as \fItemporary\fR. After the session, this table will
be dropped.
.Sp
If a table name is provided, it will be checked for existence. If found,
it will be used with the specified \f(CW\*(C`key\*(C'\fR and \f(CW\*(C`fld\*(C'\fR.  Otherwise it will
be created with \f(CW\*(C`key\*(C'\fR and \f(CW\*(C`fld\*(C'\fR, but it will not be dropped at the end
of the session.
.IP key 2
.IX Item "key"
Defines the name of the key field in the database table.  The default is
\&\f(CW\*(C`h_key\*(C'\fR.
.IP fld 2
.IX Item "fld"
Defines the name of the value field in the database table.   The default
is \f(CW\*(C`h_value\*(C'\fR.
.IP vtp 2
.IX Item "vtp"
Defines the type of the fld field in the database table.  The default is
depending on the underlying database and most likely some kind of BLOB.
.IP ro 2
.IX Item "ro"
Set handle to read-only for this tie. Useful when using existing tables or
views than cannot be updated.
.Sp
When attempting to alter data (add, delete, change) a warning is issued
and the action is ignored.
.IP str 2
.IX Item "str"
Defines the required persistence module.   Currently supports the use of
\&\f(CW\*(C`Storable\*(C'\fR, \f(CW\*(C`Sereal\*(C'\fR, \f(CW\*(C`JSON\*(C'\fR, \f(CW\*(C`JSON::MaybeXS\*(C'\fR, \f(CW\*(C`JSON::SIMD\*(C'\fR,
\&\f(CW\*(C`JSON::Syck\*(C'\fR, \f(CW\*(C`JSON::XS\*(C'\fR, \f(CW\*(C`YAML\*(C'\fR, \f(CW\*(C`YAML::Syck\*(C'\fR and \f(CW\*(C`XML::Dumper\*(C'\fR.
.Sp
The default is undefined.
.Sp
Passing any other value will cause a \f(CW\*(C`croak\*(C'\fR.
.Sp
If you want to preserve Encoding on the hash values, you should use this
feature. (except where \f(CW\*(C`PV8\*(C'\fR has a \f(CW\*(C`\-\*(C'\fR in the table below)
.Sp
Here is a table of supported data types given a data structure like this:
.Sp
.Vb 10
\&    my %deep = (
\&        UND => undef,
\&        IV  => 1,
\&        NV  => 3.14159265358979,
\&        PV  => "string",
\&        PV8 => "ab\encd\ex{20ac}\et",
\&        PVM => $!,
\&        RV  => \e$DBD,
\&        AR  => [ 1..2 ],
\&        HR  => { key => "value" },
\&        OBJ => ( bless { auto_diag => 1 }, "Text::CSV_XS" ),
\&        RX  => qr{^re[gG]e?x},
\&        FMT => *{$::{STDOUT}}{FORMAT},
\&        CR  => sub { "code"; },
\&        GLB => *STDERR,
\&        IO  => *{$::{STDERR}}{IO},
\&        );
\&
\&              UND  IV  NV  PV PV8 PVM  RV  AR  HR OBJ  RX FMT  CR GLB  IO
\& No streamer   x   x   x   x   x   x   x   x   x   x   \-   \-   \-   \-   \-
\& Storable      x   x   x   x   x   x   x   x   x   x   \-   \-   \-   \-   \-
\& Sereal        x   x   x   x   x   x   x   x   x   x   x   x   \-   \-   \-
\& JSON          x   x   x   x   x   x   \-   x   x   \-   \-   \-   \-   \-   \-
\& JSON::MaybeXS x   x   x   x   x   x   \-   x   x   \-   \-   \-   \-   \-   \-
\& JSON::SIMD    x   x   x   x   x   x   \-   x   x   \-   \-   \-   \-   \-   \-
\& JSON::Syck    x   x   x   x   \-   x   \-   x   x   x   \-   x   \-   \-   \-
\& JSON::XS      x   x   x   x   x   x   \-   x   x   \-   \-   \-   \-   \-   \-
\& YAML          x   x   x   x   \-   x   x   x   x   x   x   x   \-   \-   \-
\& YAML::Syck    x   x   x   x   \-   x   x   x   x   x   \-   x   \-   \-   \-
\& XML::Dumper   x   x   x   x   x   x   x   x   x   x   \-   x   \-   \-   \-
\& FreezeThaw    x   x   x   x   \-   x   x   x   x   x   \-   x   \-   x   \-
\& Bencode       \-   x   x   x   \-   x   \-   x   x   \-   \-   \-   \-   x   \-
.Ve
.Sp
So, \f(CW\*(C`Storable\*(C'\fR does not support persistence of types \f(CW\*(C`CODE\*(C'\fR, \f(CW\*(C`REGEXP\*(C'\fR,
\&\f(CW\*(C`FORMAT\*(C'\fR, \f(CW\*(C`IO\*(C'\fR, and \f(CW\*(C`GLOB\*(C'\fR. Be sure to test if all of your data types
are supported by the serializer you choose. YMMV.
.Sp
"No streamer"  might work inside the current process if reference values
are stored, but it is highly unlikely they are persistent.
.Sp
Also note that this module does not yet support dynamic deep structures.
See Nesting and deep structures.
.SS Encoding
.IX Subsection "Encoding"
\&\f(CW\*(C`Tie::Array::DBD\*(C'\fR stores values as binary data. This means that
all Encoding and magic is lost when the data is stored, and thus is also
not available when the data is restored,  hence all internal information
about the data is also lost, which includes the \f(CW\*(C`UTF8\*(C'\fR flag.
.PP
If you want to preserve the \f(CW\*(C`UTF8\*(C'\fR flag you will need to store internal
flags and use the streamer option:
.PP
.Vb 1
\&  tie my @array, "Tie::Array::DBD", "dbi:Pg:", { str => "Storable" };
.Ve
.PP
If you do not want the performance impact of Storable just to be able to
store and retrieve UTF\-8 values, there are two ways to do so:
.PP
.Vb 3
\&  # Use utf\-8 from database
\&  tie my @array, "Tie::Array::DBD", "dbi:Pg:", { vtp => "text" };
\&  $array[2] = "The teddybear costs \ex{20ac} 45.95";
\&
\&  # use Encode
\&  tie my @array, "Tie::Array::DBD", "dbi:Pg:";
\&  $array[2] = encode "UTF\-8", "The teddybear costs \ex{20ac} 45.95";
.Ve
.PP
Note  that using Encode will allow other binary data too where using the
database encoding does not:
.PP
.Vb 1
\&  $array[2] = pack "L>A*", time, encode "UTF\-8", "Price: \ex{20ac} 45.95";
.Ve
.SS "Nesting and deep structures"
.IX Xref "nesting"
.IX Subsection "Nesting and deep structures"
\&\f(CW\*(C`Tie::Array::DBD\*(C'\fR stores values as binary data. This means that
all structure is lost when the data is stored and not available when the
data is restored. To maintain deep structures, use the streamer option:
.PP
.Vb 1
\&  tie my @array, "Tie::Array::DBD", "dbi:Pg:", { str => "Storable" };
.Ve
.PP
Note that changes inside deep structures do not work. See "TODO".
.SH METHODS
.IX Header "METHODS"
.SS "drop ()"
.IX Subsection "drop ()"
If a table was used with persistence, the table will not be dropped when
the \f(CW\*(C`untie\*(C'\fR is called.  Dropping can be forced using the \f(CW\*(C`drop\*(C'\fR method
at any moment while the array is tied:
.PP
.Vb 1
\&  tied (@array)\->drop;
.Ve
.SS readonly
.IX Subsection "readonly"
You can inquire or set the readonly status of the bound array. Note that
setting read-only also forbids to delete generated temporary table.
.PP
.Vb 2
\&  my $readonly = tied (@array)\->readonly ();
\&  tied (@array)\->readonly (1);
.Ve
.PP
Setting read-only accepts 3 states:
.ie n .IP "false (""undef"", """", 0)" 2
.el .IP "false (\f(CWundef\fR, \f(CW""""\fR, \f(CW0\fR)" 2
.IX Item "false (undef, """", 0)"
This will (re)set the array to read-write.
.ie n .IP 1 2
.el .IP \f(CW1\fR 2
.IX Item "1"
This will set read-only. When attempting to make changes, a warning is given.
.ie n .IP 2 2
.el .IP \f(CW2\fR 2
.IX Item "2"
This will set read-only. When attempting to make changes, the process will die.
.SH PREREQUISITES
.IX Header "PREREQUISITES"
The only real prerequisite is DBI but of course that uses the DBD driver
of your choice. Some drivers are (very) actively maintained.  Be sure to
to use recent Modules.  DBD::SQLite for example seems to require version
1.29 or up.
.SH "RESTRICTIONS and LIMITATIONS"
.IX Header "RESTRICTIONS and LIMITATIONS"
.IP \(bu 2
\&\f(CW\*(C`DBD::Oracle\*(C'\fR limits the size of BLOB-reads to 4kb by default, which is
too small for reasonable data structures. Tie::Array::DBD locally raises
this value to 4Mb, which is still an arbitrary limit.
.IP \(bu 2
\&\f(CW\*(C`Storable\*(C'\fR does not support persistence of perl types \f(CW\*(C`IO\*(C'\fR, \f(CW\*(C`REGEXP\*(C'\fR,
\&\f(CW\*(C`CODE\*(C'\fR, \f(CW\*(C`FORMAT\*(C'\fR, and \f(CW\*(C`GLOB\*(C'\fR.  Future extensions might implement some
alternative streaming modules, like \f(CW\*(C`Data::Dump::Streamer\*(C'\fR or use mixin
approaches that enable you to fit in your own.
.IP \(bu 2
Note that neither DBD::CSV nor DBD::Unify support \f(CW\*(C`AutoCommit\*(C'\fR.
.IP \(bu 2
For now, Firebird does not support \f(CW\*(C`TEXT\*(C'\fR (or \f(CW\*(C`CLOB\*(C'\fR) in DBD::Firebird
at a level required by Tie::Array::DBD.
.Sp
Firebird support is stalled.
.SH TODO
.IX Header "TODO"
.IP "Update on deep changes" 2
.IX Item "Update on deep changes"
Currently,  nested structures do not get updated when it is an change in
a deeper part.
.Sp
.Vb 1
\&  tie my @array, "Tie::Array::DBD", $dbh, { str => "Storable" };
\&
\&  @array = (
\&      [ 1, "foo" ],
\&      [ 2, "bar" ],
\&      );
\&
\&  $array[1][0]++; # No effect :(
.Ve
.IP Documentation 2
.IX Item "Documentation"
Better document what the implications are of storing  \fIdata\fR content in
a database and restoring that. It will not be fool proof.
.IP Mixins 2
.IX Item "Mixins"
Maybe: implement a feature that would enable plugins or mixins to do the
streaming or preservation of other data attributes.
.SH AUTHOR
.IX Header "AUTHOR"
H.Merijn Brand <h.m.brand@xs4all.nl>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2010\-2023 H.Merijn Brand
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DBI, Tie::DBI, Tie::Array, Tie::Hash::DBD, DBM::Deep, Storable, Sereal,
JSON, JSON::MaybeXS, JSON::SIMD, JSON::Syck, JSON::XS, YAML, YAML::Syck,
XML::Dumper, Bencode, FreezeThaw
